plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
}

// 自定义选项
def mVersions = rootProject.ext.mVersions
def mDependencies = rootProject.ext.mDencies
def mIds = rootProject.ext.mIds

// 签名属性配置
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    compileSdk mVersions.compileSdk

    defaultConfig {
        applicationId mIds.app
        minSdk mVersions.minSdk
        targetSdk mVersions.targetSdk
        versionCode mVersions.versionCode
        versionName mVersions.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        // src代码中有可能需要用到跨模块交互
        buildConfigField("boolean", "isDebug", String.valueOf(isDebug))
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            // 如果是组件化模式，需要单独运行时
            if (!isDebug){
                java {
                    // release 时 test 目录下文件不需要合并到主工程
                    exclude '**/test/**'
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        useIR = true
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion compose_version
        //kotlinCompilerVersion kotlin_version
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}


dependencies {

    // 公共基本依赖
    mDependencies.each { k, v -> implementation v }

    implementation project(path: ':bilisplash_module')

    implementation project(path: ':common_util_lib')

    // releaseImplementation project(path: ':retrofit_lib', configuration: 'release')
    // debugImplementation project(path: ':retrofit_lib', configuration: 'debug')
    implementation project(path: ':biliwebview_module')
    implementation project(path: ':retrofit_lib')
    implementation project(path: ':bilibanner_module')
    implementation project(path: ':videodetail_model')

}